#include "cppship/cmake/package_configurer.h"
#include "cppship/cmake/lib.h"
#include "cppship/core/layout.h"
#include "cppship/core/manifest.h"
#include "cppship/util/io.h"
#include "cppship/util/repo.h"

#include <fmt/core.h>
#include <fmt/format.h>

using namespace cppship;
using namespace fmt::literals;

void cmake::config_packages(
    const ResolvedDependencies& cppship_deps, const ResolvedDependencies& all_deps, const ConfigOptions& options)
{
    for (const auto& [package, dep] : cppship_deps) {
        const auto& cmake_target = dep.cmake_target;
        const auto package_dir = options.deps_dir / package;
        const auto package_manifest = package_dir / kRepoConfigFile;
        const auto package_cmake_config_file = options.out_dir / fmt::format("{}-config.cmake", package);

        if (!fs::exists(package_manifest)) {
            write(package_cmake_config_file,
                fmt::format(R"(# header only lib config generated by cppship
add_library({target} INTERFACE IMPORTED)
target_include_directories({target} INTERFACE {cmake_deps_dir}/{package}/include)
)",
                    "target"_a = cmake_target, "package"_a = dep.package, "cmake_deps_dir"_a = options.cmake_deps_dir));

            continue;
        }

        // TODO(wuqq): refine generation, apply cxxflags and definitions
        Manifest manifest(package_manifest);
        Layout layout(package_dir, package);
        const auto lib_target = *layout.lib();
        const auto cmake_deps = cmake::collect_cmake_deps(manifest.dependencies(), all_deps);
        cmake::CmakeLib lib({
            .name = lib_target.name,
            .include_dirs = lib_target.includes,
            .sources = lib_target.sources,
            .deps = cmake_deps,
        });

        std::ostringstream out;
        lib.build(out);

        out << fmt::format("\nadd_library({} ALIAS {})\n", cmake_target, lib.target());

        auto content = out.str();
        if (const auto& func = options.post_process) {
            func(content);
        }

        write(package_cmake_config_file, content);
    }
}