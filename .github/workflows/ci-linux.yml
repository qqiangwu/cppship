name: Linux

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build:
    if: ${{!contains(github.event.pull_request.title, 'skip-ci') && !contains(github.event.head_commit.message, 'skip-ci')}}
    strategy:
      matrix:
        build_type: [ Debug, Release ]
        compiler:
          - cc: clang-12
            cxx: clang++-12
          - cc: clang-13
            cxx: clang++-13
          - cc: clang-14
            cxx: clang++-14
          - cc: gcc-9
            cxx: g++-9
          - cc: gcc-10
            cxx: g++-10
          - cc: gcc-11
            cxx: g++-11
          # gcc-12 has bug in -O3: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105329

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install conan
      run: pip3 install conan

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }}

    - name: Install
      # Install your program with the given configuration
      run: cmake --install ${{github.workspace}}/build --config ${{ matrix.build_type }}

    - name: Test
      run: ctest --output-on-failure --verbose
      working-directory: build

    - name: Run cppship
      run: |
        rm -rf build
        type cppship
        cppship
        cppship build --profile ${{ matrix.build_type }}
        cppship run --profile ${{ matrix.build_type }}
        cppship test --profile ${{ matrix.build_type }}

    - name: Lint and format
      if: matrix.build_type == 'Release' && matrix.compiler.cxx == 'clang++-14' && github.event_name == 'pull_request'
      run: |
        mergebase=$(git merge-base --fork-point origin/${{github.event.pull_request.base.ref}})
        cppship fmt
        cppship fmt -a
        cppship fmt -c ${mergebase}
        cppship lint -c ${mergebase}
        cppship clean

    - name: Cppship init app
      run: |
        mkdir .bin && cd .bin
        cppship init . --name app
        test -f .clang-tidy
        test -f .clang-format
        cppship build
        cppship run
        cppship test
        cppship install
        type app
        cd ..

    - name: Cppship init lib
      run: |
        mkdir .lib && cd .lib
        cppship init . --name lib --lib
        test -f .clang-tidy
        test -f .clang-format
        cppship build
        cppship test

    - name: Test cppship
      run: |
        git clone https://github.com/qqiangwu/cppship-examples.git
        cd cppship-examples
        bash verify.sh